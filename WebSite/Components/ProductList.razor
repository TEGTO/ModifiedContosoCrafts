@using Microsoft.AspNetCore.Components.Web;
@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@inject IProductService productService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
	.checked {
		color: orange;
	}
</style>

<div id="productsContainer" class="container">
	<div class="row">
		@foreach (var product in productService.GetProducts())
		{
			<div class="col-lg-4 col-md-5 mb-2">
				<div class="card">
					<img src="@product.Image" class="card-img-top" alt="..." style="height: 18rem;">
					<div class="card-body">
						<h5 class="card-title" style="height: 2rem;">@product.Title</h5>
					</div>
					<div class="border-top"></div> <!-- Separator -->
					<div class="card-body">
						<div class="text-muted">
							<button @onclick="(e => SelectProduct(product?.Id ?? string.Empty))"
									data-toggle="modal" data-target="#productModal" class="btn btn-primary rounded-1">
								More Info
							</button>
							<button @onclick="(e => DeleteProduct(product?.Id ?? string.Empty))"
									type="button" class="btn btn-danger rounded-0">
								Delete
							</button>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
</div>
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		@if (selectedProduct != null)
		{
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<img src="@selectedProduct.Image" class="card-img-top" alt="...">
						<div class="card-body">
							<p class="card-text">@selectedProduct.Description</p>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					@if (voteCount == 0)
					{
						<span>Be the first to vote!</span>
					}
					else
					{
						<span>@voteCount @voteLabel</span>
					}
					@for (int i = 0; i < 5; i++)
					{
						int currentStar = i;
						if (i < currentRating)
						{
							<span class="fa fa-star checked" @onclick="(e => SumbitRating(currentStar + 1))"></span>
						}
						else
						{
							<span class="fa fa-star" @onclick="(e => SumbitRating(currentStar + 1))"></span>
						}
					}
				</div>
			</div>
		}
	</div>
</div>

@code {
	private Product selectedProduct;
	private float currentRating = 0;
	private int voteCount = 0;
	private string voteLabel;

	private void SelectProduct(string productId)
	{
		selectedProduct = productService.GetProducts().First(x => x.Id == productId);
		GetCurrentRating();
	}
	private async Task DeleteProduct(string productId)
	{
		productService.DeleteProductById(productId);
		await RefreshProducts();
	}
	private async Task RefreshProducts()
	{
		await Task.Delay(50);
		StateHasChanged();
	}
	private void GetCurrentRating()
	{
		if (selectedProduct.Ratings == null)
		{
			currentRating = 0;
			voteCount = 0;
		}
		else
		{
			voteCount = selectedProduct.Ratings.Count();
			voteLabel = voteCount > 1 ? "Votes" : "Vote";
			currentRating = selectedProduct.Ratings.Sum() / voteCount;
		}
		Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
	}
	private void SumbitRating(float rating)
	{
		Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
		productService.AddRatings(selectedProduct.Id, rating);
		SelectProduct(selectedProduct.Id);
	}
}
